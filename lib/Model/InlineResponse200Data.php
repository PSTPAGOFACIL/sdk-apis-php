<?php
/**
 * InlineResponse200Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API Pago Facil
 *
 * API de Pago FÃ¡cil
 *
 * OpenAPI spec version: 2.1.5
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.18
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse200Data Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total_remittances' => 'int',
'items' => '\Swagger\Client\Model\InlineResponse200DataItems[]',
'total_transactions' => 'int',
'total_nullification' => 'int',
'nullifications' => '\Swagger\Client\Model\InlineResponse200DataNullifications[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'total_remittances' => null,
'items' => null,
'total_transactions' => null,
'total_nullification' => null,
'nullifications' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_remittances' => 'totalRemittances',
'items' => 'items',
'total_transactions' => 'totalTransactions',
'total_nullification' => 'totalNullification',
'nullifications' => 'nullifications'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_remittances' => 'setTotalRemittances',
'items' => 'setItems',
'total_transactions' => 'setTotalTransactions',
'total_nullification' => 'setTotalNullification',
'nullifications' => 'setNullifications'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_remittances' => 'getTotalRemittances',
'items' => 'getItems',
'total_transactions' => 'getTotalTransactions',
'total_nullification' => 'getTotalNullification',
'nullifications' => 'getNullifications'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_remittances'] = isset($data['total_remittances']) ? $data['total_remittances'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['total_transactions'] = isset($data['total_transactions']) ? $data['total_transactions'] : null;
        $this->container['total_nullification'] = isset($data['total_nullification']) ? $data['total_nullification'] : null;
        $this->container['nullifications'] = isset($data['nullifications']) ? $data['nullifications'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_remittances
     *
     * @return int
     */
    public function getTotalRemittances()
    {
        return $this->container['total_remittances'];
    }

    /**
     * Sets total_remittances
     *
     * @param int $total_remittances Total de los abonos
     *
     * @return $this
     */
    public function setTotalRemittances($total_remittances)
    {
        $this->container['total_remittances'] = $total_remittances;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\InlineResponse200DataItems[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\InlineResponse200DataItems[] $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets total_transactions
     *
     * @return int
     */
    public function getTotalTransactions()
    {
        return $this->container['total_transactions'];
    }

    /**
     * Sets total_transactions
     *
     * @param int $total_transactions Total de transacciones
     *
     * @return $this
     */
    public function setTotalTransactions($total_transactions)
    {
        $this->container['total_transactions'] = $total_transactions;

        return $this;
    }

    /**
     * Gets total_nullification
     *
     * @return int
     */
    public function getTotalNullification()
    {
        return $this->container['total_nullification'];
    }

    /**
     * Sets total_nullification
     *
     * @param int $total_nullification Total de anulaciones
     *
     * @return $this
     */
    public function setTotalNullification($total_nullification)
    {
        $this->container['total_nullification'] = $total_nullification;

        return $this;
    }

    /**
     * Gets nullifications
     *
     * @return \Swagger\Client\Model\InlineResponse200DataNullifications[]
     */
    public function getNullifications()
    {
        return $this->container['nullifications'];
    }

    /**
     * Sets nullifications
     *
     * @param \Swagger\Client\Model\InlineResponse200DataNullifications[] $nullifications nullifications
     *
     * @return $this
     */
    public function setNullifications($nullifications)
    {
        $this->container['nullifications'] = $nullifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
